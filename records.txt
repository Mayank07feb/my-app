// import React, { useState } from 'react';
// import { View, Text, ScrollView, TouchableOpacity, Dimensions, Image, Modal } from 'react-native';
// import CalendarPicker from 'react-native-calendar-picker';
// import { format } from 'date-fns';
// import Layout from '../components/Layout';

// const AttendanceRecord: React.FC = () => {
//   const [selectedDate, setSelectedDate] = useState<string>('');
//   const [showCalendar, setShowCalendar] = useState(false);
//   const screenWidth = Dimensions.get('window').width;

//   // Single day record
//   const record = {
//     date: '2024-11-20',
//     status: 'Present',
//     checkIn: '9:00 AM',
//     checkOut: '5:00 PM',
//     checkInImage: 'https://picsum.photos/100/100?random=1',
//     checkOutImage: 'https://picsum.photos/100/100?random=2',
//     checkInDistance: '2 km',
//     checkOutDistance: '3 km',
//     checkInBy: 'John Doe',
//     checkOutBy: 'Jane Smith',
//     breaks: '30 min',
//   };

//   const columnWidths = {
//     date: 100,
//     status: 80,
//     checkIn: 90,
//     checkOut: 90,
//     image: 120,
//     distance: 100,
//     person: 120,
//     breaks: 80,
//   };

//   const getStatusColor = (status: string) => {
//     switch (status.toLowerCase()) {
//       case 'present':
//         return 'bg-green-100 text-green-800';
//       case 'absent':
//         return 'bg-red-100 text-red-800';
//       default:
//         return 'bg-gray-100 text-gray-800';
//     }
//   };

//   const handleFilter = () => {
//     // Handle date selection
//   };

//   const handleClear = () => {
//     setSelectedDate('');
//   };

//   const onDateChange = (date: Date) => {
//     setSelectedDate(format(date, 'yyyy-MM-dd'));
//     setShowCalendar(false);
//   };

//   const FilterSection = () => (
//     <View className="bg-white p-6 rounded-lg shadow-sm mb-6 max-w-xl">
//       <View className="flex-1">
//         <Text className="text-sm font-medium text-gray-700 mb-1">Select Date</Text>
//         <TouchableOpacity
//           onPress={() => setShowCalendar(true)}
//           className="px-3 py-2 border border-gray-300 rounded-md bg-white"
//         >
//           <Text className="text-sm text-gray-900">
//             {selectedDate || 'YYYY-MM-DD'}
//           </Text>
//         </TouchableOpacity>
//       </View>

//       <View className="flex-row space-x-4 mt-4">
//         <TouchableOpacity
//           onPress={handleFilter}
//           className="flex-1 bg-teal-600 py-2 rounded-md"
//         >
//           <Text className="text-white text-center font-medium">View Record</Text>
//         </TouchableOpacity>
//         <TouchableOpacity
//           onPress={handleClear}
//           className="flex-1 bg-gray-100 py-2 rounded-md"
//         >
//           <Text className="text-gray-700 text-center font-medium">Clear</Text>
//         </TouchableOpacity>
//       </View>

//       {/* Calendar Modal */}
//       <Modal
//         visible={showCalendar}
//         transparent={true}
//         animationType="slide"
//       >
//         <View className="flex-1 justify-center bg-black/50">
//           <View className="bg-white mx-4 rounded-lg">
//             <View className="p-4 border-b border-gray-200">
//               <Text className="text-lg font-semibold text-gray-900">Select Date</Text>
//             </View>

//             <CalendarPicker
//               onDateChange={onDateChange}
//               selectedDayColor="#0D9488"
//               selectedDayTextColor="#FFFFFF"
//             />

//             <TouchableOpacity
//               onPress={() => setShowCalendar(false)}
//               className="p-4 border-t border-gray-200"
//             >
//               <Text className="text-center text-teal-600 font-medium">Cancel</Text>
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </View>
//   );

//   const TableHeader = ({ text, width }: { text: string; width: number }) => (
//     <View style={{ width }} className="px-4 py-3 bg-teal-600">
//       <Text className="text-white font-medium text-sm">{text}</Text>
//     </View>
//   );

//   const ImageCell = ({ imageUrl, width }: { imageUrl: string | null; width: number }) => (
//     <View style={{ width }} className="px-4 py-3">
//       {imageUrl ? (
//         <Image
//           source={{ uri: imageUrl }}
//           style={{ width: 60, height: 60, borderRadius: 8 }}
//           resizeMode="cover"
//         />
//       ) : (
//         <View className="w-[60px] h-[60px] bg-gray-200 rounded-lg items-center justify-center">
//           <Text className="text-gray-500 text-xs">No image</Text>
//         </View>
//       )}
//     </View>
//   );

//   const TableCell = ({ text, width, customStyle = '' }: { text: string; width: number; customStyle?: string }) => (
//     <View style={{ width }} className={`px-4 py-3 ${customStyle}`}>
//       <Text className="text-sm text-gray-900">{text}</Text>
//     </View>
//   );

//   return (
//     <Layout>
//       <View className="flex-1 bg-gray-50">
//         <View className="p-4">
//           <Text className="text-2xl font-bold text-gray-900 mb-6">Daily Attendance Record</Text>

//           {/* Filter Section */}
//           <FilterSection />

//           {/* Table */}
//           <View className="bg-white rounded-lg shadow-sm overflow-hidden">
//             <ScrollView horizontal showsHorizontalScrollIndicator={true}>
//               <View>
//                 {/* Header */}
//                 <View className="flex-row border-b border-gray-200">
//                   <TableHeader text="Date" width={columnWidths.date} />
//                   <TableHeader text="Status" width={columnWidths.status} />
//                   <TableHeader text="Check In" width={columnWidths.checkIn} />
//                   <TableHeader text="Check Out" width={columnWidths.checkOut} />
//                   <TableHeader text="Check In Image" width={columnWidths.image} />
//                   <TableHeader text="Check Out Image" width={columnWidths.image} />
//                   <TableHeader text="Check In Distance" width={columnWidths.distance} />
//                   <TableHeader text="Check Out Distance" width={columnWidths.distance} />
//                   <TableHeader text="Check In By" width={columnWidths.person} />
//                   <TableHeader text="Check Out By" width={columnWidths.person} />
//                   <TableHeader text="Breaks" width={columnWidths.breaks} />
//                 </View>

//                 {/* Body */}
//                 <View className="flex-row border-b border-gray-200 items-center bg-gray-50">
//                   <TableCell text={record.date} width={columnWidths.date} />
//                   <TableCell
//                     text={record.status}
//                     width={columnWidths.status}
//                     customStyle={`rounded-md ${getStatusColor(record.status)}`}
//                   />
//                   <TableCell text={record.checkIn} width={columnWidths.checkIn} />
//                   <TableCell text={record.checkOut} width={columnWidths.checkOut} />
//                   <ImageCell imageUrl={record.checkInImage} width={columnWidths.image} />
//                   <ImageCell imageUrl={record.checkOutImage} width={columnWidths.image} />
//                   <TableCell text={record.checkInDistance} width={columnWidths.distance} />
//                   <TableCell text={record.checkOutDistance} width={columnWidths.distance} />
//                   <TableCell text={record.checkInBy} width={columnWidths.person} />
//                   <TableCell text={record.checkOutBy} width={columnWidths.person} />
//                   <TableCell text={record.breaks} width={columnWidths.breaks} />
//                 </View>
//               </View>
//             </ScrollView>
//           </View>
//         </View>
//       </View>
//     </Layout>
//   );
// };

// export default AttendanceRecord;


















import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, Image, ActivityIndicator, TouchableOpacity, Modal, SafeAreaView, Dimensions } from 'react-native';
import CalendarPicker from 'react-native-calendar-picker';
import { format } from 'date-fns';
import Layout from '../components/Layout';
import { fetchAttendanceData } from '../api/api';

const AttendanceDetailModal = ({ attendance, isVisible, onClose }) => {
  if (!attendance) return null;

  return (
    <Modal
      animationType="slide"
      transparent={true}
      visible={isVisible}
      onRequestClose={onClose}
    >
      <View className="flex-1 justify-end">
        <View className="bg-white rounded-t-3xl h-[90%] shadow-2xl">
          {/* Modal Header */}
          <View className="bg-teal-600 p-4 rounded-t-3xl">
            <View className="flex-row justify-between items-center">
              <Text className="text-white text-xl font-bold">
                Attendance Details
              </Text>
              <TouchableOpacity onPress={onClose}>
                <Text className="text-white text-lg">âœ•</Text>
              </TouchableOpacity>
            </View>
          </View>

          <ScrollView className="p-4">
            {/* Personal Info Section */}
            <View className="bg-gray-100 p-4 rounded-xl mb-4">
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Name</Text>
                <Text className="font-bold">{attendance.name}</Text>
              </View>
              <View className="flex-row justify-between">
                <Text className="text-gray-600">Office</Text>
                <Text>{attendance.office_id || 'N/A'}</Text>
              </View>
            </View>

            {/* Check-In Section */}
            <View className="bg-gray-100 p-4 rounded-xl mb-4">
              <Text className="text-lg font-semibold text-teal-700 mb-3">
                Check-In Details
              </Text>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Time</Text>
                <Text>
                  {attendance.check_in_time
                    ? new Date(attendance.check_in_time).toLocaleString()
                    : 'N/A'}
                </Text>
              </View>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Distance</Text>
                <Text>
                  {attendance.latest_attendance?.check_in_distance || 'N/A'}
                </Text>
              </View>
              {attendance.latest_attendance?.check_in_image && (
                <Image
                  source={{
                    uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_in_image}`,
                  }}
                  className="w-full h-40 rounded-xl mt-3"
                  resizeMode="cover"
                />
              )}
            </View>

            {/* Check-Out Section */}
            <View className="bg-gray-100 p-4 rounded-xl mb-4">
              <Text className="text-lg font-semibold text-teal-700 mb-3">
                Check-Out Details
              </Text>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Time</Text>
                <Text>
                  {attendance.check_out_time
                    ? new Date(attendance.check_out_time).toLocaleString()
                    : 'N/A'}
                </Text>
              </View>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Distance</Text>
                <Text>
                  {attendance.latest_attendance?.check_out_distance || 'N/A'}
                </Text>
              </View>
              {attendance.latest_attendance?.check_out_image && (
                <Image
                  source={{
                    uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_out_image}`,
                  }}
                  className="w-full h-40 rounded-xl mt-3"
                  resizeMode="cover"
                />
              )}
            </View>

            {/* Additional Info Section */}
            <View className="bg-gray-100 p-4 rounded-xl mb-4">
              <Text className="text-lg font-semibold text-teal-700 mb-3">
                Additional Information
              </Text>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Working Hours</Text>
                <Text>{attendance.office_time || 'N/A'}</Text>
              </View>
              <View className="flex-row justify-between">
                <Text className="text-gray-600">Check-In Note</Text>
                <Text className="ml-4" numberOfLines={2}>
                  {attendance.latest_attendance?.check_in_note || 'N/A'}
                </Text>
              </View>
            </View>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );
};

const AttendanceRecord = () => {
  const [attendanceData, setAttendanceData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedAttendance, setSelectedAttendance] = useState(null);

  const screenWidth = Dimensions.get('window').width;

  useEffect(() => {
    const getAttendanceData = async () => {
      try {
        const data = await fetchAttendanceData();
        setAttendanceData(data);
        setLoading(false);
      } catch (error) {
        setError(error.message);
        setLoading(false);
      }
    };

    getAttendanceData();
  }, []);

  if (loading) {
    return (
      <SafeAreaView className="flex-1 justify-center items-center bg-gray-100">
        <ActivityIndicator size="large" color="#0D9488" />
      </SafeAreaView>
    );
  }

  if (error) {
    return (
      <SafeAreaView className="flex-1 justify-center items-center bg-gray-100">
        <Text className="text-red-500 text-lg text-center">{`Error: ${error}`}</Text>
      </SafeAreaView>
    );
  }

  return (
    <Layout>
      <SafeAreaView className="flex-1 bg-gray-100">
        <View className="bg-teal-600 p-4 shadow-md">
          <Text className="text-2xl font-bold text-white text-center">
            Attendance Data
          </Text>
        </View>

        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <View style={{ minWidth: screenWidth * 2 }} className="border border-gray-300 rounded-md overflow-hidden">
            {/* Table Header */}
            <View className="flex-row bg-teal-600">
              {[
                'Name', 'Office', 'Check-In', 'Check-In Image', 'Check-In Note',
                'Check-Out Time', 'Check-Out Image', 'Check-Out Note',
                'Working Hours', 'Check-In Distance', 'Check-Out Distance', 'Actions'
              ].map((header, index) => (
                <Text
                  key={index}
                  className="text-white font-semibold text-center p-3 border-r border-teal-400"
                  style={{
                    flex: header === 'Actions' ? 1 : 2,
                    fontSize: 12
                  }}
                >
                  {header}
                </Text>
              ))}
            </View>

            {/* Table Rows */}
            {attendanceData && attendanceData.length > 0 ? (
              attendanceData.map((attendance, index) => (
                <TouchableOpacity
                  key={attendance.id}
                  onPress={() => setSelectedAttendance(attendance)}
                  className={`flex-row ${index % 2 === 0 ? 'bg-white' : 'bg-teal-50'
                    }`}
                >
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.name}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.office_id || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.check_in_time
                      ? new Date(attendance.check_in_time).toLocaleTimeString()
                      : 'N/A'}
                  </Text>
                  <View className="p-3 justify-center items-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_in_image ? (
                      <Image
                        source={{
                          uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_in_image}`,
                        }}
                        className="w-16 h-16 rounded-md"
                      />
                    ) : (
                      <Text className="text-gray-500">No Image</Text>
                    )}
                  </View>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_in_note || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.check_out_time
                      ? new Date(attendance.check_out_time).toLocaleTimeString()
                      : 'N/A'}
                  </Text>
                  <View className="p-3 justify-center items-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_out_image ? (
                      <Image
                        source={{
                          uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_out_image}`,
                        }}
                        className="w-16 h-16 rounded-md"
                      />
                    ) : (
                      <Text className="text-gray-500">No Image</Text>
                    )}
                  </View>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_out_note || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.office_time || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_in_distance || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_out_distance || 'N/A'}
                  </Text>
                  <View className="p-3 justify-center items-center" style={{ flex: 1 }}>
                    <TouchableOpacity
                      className="bg-teal-500 py-2 px-4 rounded-md"
                      onPress={() => setSelectedAttendance(attendance)}
                    >
                      <Text className="text-white text-center text-sm">Details</Text>
                    </TouchableOpacity>
                  </View>
                </TouchableOpacity>
              ))
            ) : (
              <View className="p-4">
                <Text className="text-center text-gray-500">No attendance data available.</Text>
              </View>
            )}
          </View>
        </ScrollView>

        <AttendanceDetailModal
          attendance={selectedAttendance}
          isVisible={!!selectedAttendance}
          onClose={() => setSelectedAttendance(null)}
        />
      </SafeAreaView>
    </Layout>
  );
};

export default AttendanceRecord;































/////////////////////new design



import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, Image, ActivityIndicator, TouchableOpacity, Modal, SafeAreaView, Dimensions } from 'react-native';
import CalendarPicker from 'react-native-calendar-picker';
import { format } from 'date-fns';
import { Filter, Calendar, X } from 'lucide-react-native';
import Layout from '../components/Layout';
import { fetchAttendanceData } from '../api/api';

const AttendanceDetailModal = ({ attendance, isVisible, onClose }) => {
  if (!attendance) return null;

  return (
    <Modal
      animationType="slide"
      transparent={true}
      visible={isVisible}
      onRequestClose={onClose}
    >
      <View className="flex-1 justify-end">
        <View className="bg-white rounded-t-3xl h-[90%] shadow-2xl">
          <View className="bg-teal-600 p-4 rounded-t-3xl">
            <View className="flex-row justify-between items-center">
              <Text className="text-white text-xl font-bold">
                Attendance Details
              </Text>
              <TouchableOpacity onPress={onClose}>
                <X color="white" size={24} />
              </TouchableOpacity>
            </View>
          </View>

          <ScrollView className="p-4">
            <View className="bg-gray-100 p-4 rounded-xl mb-4">
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Name</Text>
                <Text className="font-bold">{attendance.name}</Text>
              </View>
              <View className="flex-row justify-between">
                <Text className="text-gray-600">Office</Text>
                <Text>{attendance.office_id || 'N/A'}</Text>
              </View>
            </View>

            <View className="bg-gray-100 p-4 rounded-xl mb-4">
              <Text className="text-lg font-semibold text-teal-700 mb-3">
                Check-In Details
              </Text>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Time</Text>
                <Text>
                  {attendance.check_in_time
                    ? new Date(attendance.check_in_time).toLocaleString()
                    : 'N/A'}
                </Text>
              </View>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Distance</Text>
                <Text>
                  {attendance.latest_attendance?.check_in_distance || 'N/A'}
                </Text>
              </View>
              {attendance.latest_attendance?.check_in_image && (
                <Image
                  source={{
                    uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_in_image}`,
                  }}
                  className="w-full h-40 rounded-xl mt-3"
                  resizeMode="cover"
                />
              )}
            </View>

            <View className="bg-gray-100 p-4 rounded-xl mb-4">
              <Text className="text-lg font-semibold text-teal-700 mb-3">
                Check-Out Details
              </Text>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Time</Text>
                <Text>
                  {attendance.check_out_time
                    ? new Date(attendance.check_out_time).toLocaleString()
                    : 'N/A'}
                </Text>
              </View>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Distance</Text>
                <Text>
                  {attendance.latest_attendance?.check_out_distance || 'N/A'}
                </Text>
              </View>
              {attendance.latest_attendance?.check_out_image && (
                <Image
                  source={{
                    uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_out_image}`,
                  }}
                  className="w-full h-40 rounded-xl mt-3"
                  resizeMode="cover"
                />
              )}
            </View>

            <View className="bg-gray-100 p-4 rounded-xl mb-4">
              <Text className="text-lg font-semibold text-teal-700 mb-3">
                Additional Information
              </Text>
              <View className="flex-row justify-between mb-2">
                <Text className="text-gray-600">Working Hours</Text>
                <Text>{attendance.office_time || 'N/A'}</Text>
              </View>
              <View className="flex-row justify-between">
                <Text className="text-gray-600">Check-In Note</Text>
                <Text className="ml-4" numberOfLines={2}>
                  {attendance.latest_attendance?.check_in_note || 'N/A'}
                </Text>
              </View>
            </View>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );
};

const FilterModal = ({ isVisible, onClose, onApplyFilters }) => {
  const [filterOptions, setFilterOptions] = useState({
    status: 'all',
    officeId: 'all',
  });

  return (
    <Modal
      animationType="slide"
      transparent={true}
      visible={isVisible}
      onRequestClose={onClose}
    >
      <View className="flex-1 justify-end bg-black/50">
        <View className="bg-white rounded-t-3xl">
          <View className="bg-teal-600 p-4 rounded-t-3xl">
            <View className="flex-row justify-between items-center">
              <Text className="text-white text-xl font-bold">Filters</Text>
              <TouchableOpacity onPress={onClose}>
                <X color="white" size={24} />
              </TouchableOpacity>
            </View>
          </View>

          <View className="p-4">
            <View className="mb-4">
              <Text className="text-gray-700 text-lg mb-2">Attendance Status</Text>
              <View className="flex-row space-x-2">
                {['All', 'Present', 'Absent'].map((status) => (
                  <TouchableOpacity
                    key={status}
                    onPress={() => setFilterOptions({
                      ...filterOptions,
                      status: status.toLowerCase()
                    })}
                    className={`py-2 px-4 rounded-full ${
                      filterOptions.status === status.toLowerCase()
                        ? 'bg-teal-600'
                        : 'bg-gray-200'
                    }`}
                  >
                    <Text
                      className={`${
                        filterOptions.status === status.toLowerCase()
                          ? 'text-white'
                          : 'text-gray-700'
                      }`}
                    >
                      {status}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>

            <View className="mb-4">
              <Text className="text-gray-700 text-lg mb-2">Office</Text>
              <View className="flex-row flex-wrap gap-2">
                {['All', 'Office 1', 'Office 2', 'Office 3'].map((office) => (
                  <TouchableOpacity
                    key={office}
                    onPress={() => setFilterOptions({
                      ...filterOptions,
                      officeId: office.toLowerCase()
                    })}
                    className={`py-2 px-4 rounded-full ${
                      filterOptions.officeId === office.toLowerCase()
                        ? 'bg-teal-600'
                        : 'bg-gray-200'
                    }`}
                  >
                    <Text
                      className={`${
                        filterOptions.officeId === office.toLowerCase()
                          ? 'text-white'
                          : 'text-gray-700'
                      }`}
                    >
                      {office}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>

            <TouchableOpacity
              onPress={() => {
                onApplyFilters(filterOptions);
                onClose();
              }}
              className="bg-teal-600 py-3 rounded-lg"
            >
              <Text className="text-white text-center font-semibold text-lg">
                Apply Filters
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

const DateSelectionModal = ({ showCalendar, setShowCalendar, setSelectedDate, filterByDate }) => (
  <Modal
    animationType="slide"
    transparent={true}
    visible={showCalendar}
    onRequestClose={() => setShowCalendar(false)}
  >
    <View className="flex-1 justify-center items-center bg-black/50">
      <View className="bg-white p-4 rounded-xl w-[90%]">
        <CalendarPicker
          onDateChange={(date) => {
            setSelectedDate(date);
            filterByDate(date);
            setShowCalendar(false);
          }}
          selectedDayColor="#0D9488"
          selectedDayTextColor="#FFFFFF"
        />
        <TouchableOpacity
          onPress={() => setShowCalendar(false)}
          className="mt-4 bg-gray-200 p-2 rounded-md"
        >
          <Text className="text-center">Close</Text>
        </TouchableOpacity>
      </View>
    </View>
  </Modal>
);

const HeaderControls = ({ setShowCalendar, selectedDate, setSelectedDate, filterByDate, setShowFilters }) => (
  <View className="bg-white p-4 mb-4 rounded-lg mx-4 shadow-sm">
    <Text className="text-gray-600 mb-2 text-lg font-semibold">Filters & Date Selection</Text>
    <View className="flex-row space-x-2">
      <TouchableOpacity
        onPress={() => setShowCalendar(true)}
        className="flex-1 flex-row items-center justify-center bg-teal-50 p-3 rounded-lg border border-teal-200"
      >
        <Calendar size={20} color="#0D9488" className="mr-2" />
        <Text className="text-teal-700">
          {selectedDate ? format(selectedDate, 'MMM dd, yyyy') : 'Select Date'}
        </Text>
      </TouchableOpacity>
      
      <TouchableOpacity
        onPress={() => setShowFilters(true)}
        className="bg-teal-600 p-3 rounded-lg flex-row items-center px-6"
      >
        <Filter size={20} color="white" className="mr-2" />
        <Text className="text-white font-medium">Filters</Text>
      </TouchableOpacity>
    </View>
    
    {selectedDate && (
      <TouchableOpacity
        onPress={() => {
          setSelectedDate(null);
          filterByDate(null);
        }}
        className="mt-2 bg-gray-100 py-2 rounded-lg"
      >
        <Text className="text-gray-700 text-center">Clear Date</Text>
      </TouchableOpacity>
    )}
  </View>
);

const AttendanceRecord = () => {
  const [attendanceData, setAttendanceData] = useState(null);
  const [filteredData, setFilteredData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedAttendance, setSelectedAttendance] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);
  const [showCalendar, setShowCalendar] = useState(false);
  const [showFilters, setShowFilters] = useState(false);

  const screenWidth = Dimensions.get('window').width;

  useEffect(() => {
    const getAttendanceData = async () => {
      try {
        const data = await fetchAttendanceData();
        setAttendanceData(data);
        setFilteredData(data);
        setLoading(false);
      } catch (error) {
        setError(error.message);
        setLoading(false);
      }
    };

    getAttendanceData();
  }, []);

  const filterByDate = (date) => {
    if (!date) {
      setFilteredData(attendanceData);
      return;
    }

    const selectedDateStr = format(date, 'yyyy-MM-dd');
    const filtered = attendanceData.filter(record => {
      const checkInDate = record.check_in_time ? 
        format(new Date(record.check_in_time), 'yyyy-MM-dd') : null;
      return checkInDate === selectedDateStr;
    });
    setFilteredData(filtered);
  };

  const applyFilters = (filterOptions) => {
    let filtered = attendanceData;

    if (filterOptions.status !== 'all') {
      filtered = filtered.filter(record => {
        if (filterOptions.status === 'present') {
          return record.check_in_time !== null;
        } else {
          return record.check_in_time === null;
        }
      });
    }

    if (filterOptions.officeId !== 'all') {
      filtered = filtered.filter(record => 
        record.office_id.toLowerCase() === filterOptions.officeId
      );
    }

    if (selectedDate) {
      const selectedDateStr = format(selectedDate, 'yyyy-MM-dd');
      filtered = filtered.filter(record => {
        const checkInDate = record.check_in_time ? 
          format(new Date(record.check_in_time), 'yyyy-MM-dd') : null;
        return checkInDate === selectedDateStr;
      });
    }

    setFilteredData(filtered);
  };

  if (loading) {
    return (
      <SafeAreaView className="flex-1 justify-center items-center bg-gray-100">
        <ActivityIndicator size="large" color="#0D9488" />
      </SafeAreaView>
    );
  }

  if (error) {
    return (
      <SafeAreaView className="flex-1 justify-center items-center bg-gray-100">
        <View className="bg-red-100 p-4 rounded-lg">
          <Text className="text-red-500 text-lg text-center">{`Error: ${error}`}</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <Layout>
      <SafeAreaView className="flex-1 bg-gray-100">
        <View className="bg-teal-600 p-6 shadow-lg">
          <Text className="text-2xl font-bold text-white text-center">
            Attendance Records
          </Text>
        </View>

        <HeaderControls
          setShowCalendar={setShowCalendar}
          selectedDate={selectedDate}
          setSelectedDate={setSelectedDate}
          filterByDate={filterByDate}
          setShowFilters={setShowFilters}
        />

        <DateSelectionModal
          showCalendar={showCalendar}setShowCalendar={setShowCalendar}
          setSelectedDate={setSelectedDate}
          filterByDate={filterByDate}
        />

        <FilterModal
          isVisible={showFilters}
          onClose={() => setShowFilters(false)}
          onApplyFilters={applyFilters}
        />

        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <View style={{ minWidth: screenWidth * 2 }} className="border border-gray-300 rounded-md overflow-hidden mx-4">
            <View className="flex-row bg-teal-600">
              {[
                'Name', 'Office', 'Check-In', 'Check-In Image', 'Check-In Note',
                'Check-Out Time', 'Check-Out Image', 'Check-Out Note',
                'Working Hours', 'Check-In Distance', 'Check-Out Distance', 'Actions'
              ].map((header, index) => (
                <Text
                  key={index}
                  className="text-white font-semibold text-center p-3 border-r border-teal-400"
                  style={{
                    flex: header === 'Actions' ? 1 : 2,
                    fontSize: 12
                  }}
                >
                  {header}
                </Text>
              ))}
            </View>

            {filteredData && filteredData.length > 0 ? (
              filteredData.map((attendance, index) => (
                <TouchableOpacity
                  key={attendance.id}
                  onPress={() => setSelectedAttendance(attendance)}
                  className={`flex-row ${index % 2 === 0 ? 'bg-white' : 'bg-teal-50'}`}
                >
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.name}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.office_id || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.check_in_time
                      ? new Date(attendance.check_in_time).toLocaleTimeString()
                      : 'N/A'}
                  </Text>
                  <View className="p-3 justify-center items-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_in_image ? (
                      <Image
                        source={{
                          uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_in_image}`,
                        }}
                        className="w-16 h-16 rounded-md"
                      />
                    ) : (
                      <Text className="text-gray-500">No Image</Text>
                    )}
                  </View>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_in_note || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.check_out_time
                      ? new Date(attendance.check_out_time).toLocaleTimeString()
                      : 'N/A'}
                  </Text>
                  <View className="p-3 justify-center items-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_out_image ? (
                      <Image
                        source={{
                          uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_out_image}`,
                        }}
                        className="w-16 h-16 rounded-md"
                      />
                    ) : (
                      <Text className="text-gray-500">No Image</Text>
                    )}
                  </View>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_out_note || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.office_time || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_in_distance || 'N/A'}
                  </Text>
                  <Text className="p-3 text-center border-r border-gray-300" style={{ flex: 2 }}>
                    {attendance.latest_attendance?.check_out_distance || 'N/A'}
                  </Text>
                  <View className="p-3 justify-center items-center" style={{ flex: 1 }}>
                    <TouchableOpacity
                      className="bg-teal-500 py-2 px-4 rounded-md"
                      onPress={() => setSelectedAttendance(attendance)}
                    >
                      <Text className="text-white text-center text-sm">Details</Text>
                    </TouchableOpacity>
                  </View>
                </TouchableOpacity>
              ))
            ) : (
              <View className="p-4">
                <Text className="text-center text-gray-500">No attendance data available for the selected date.</Text>
              </View>
            )}
          </View>
        </ScrollView>

        <AttendanceDetailModal
          attendance={selectedAttendance}
          isVisible={!!selectedAttendance}
          onClose={() => setSelectedAttendance(null)}
        />
      </SafeAreaView>
    </Layout>
  );
};

export default AttendanceRecord;