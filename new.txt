import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, Image, ActivityIndicator, TouchableOpacity, Modal, SafeAreaView } from 'react-native';
import { fetchAttendanceData } from '../api/api';

const AttendanceDetailModal = ({ attendance, isVisible, onClose }) => {
    if (!attendance) return null;

    return (
        <Modal
            animationType="slide"
            transparent={true}
            visible={isVisible}
            onRequestClose={onClose}
        >
            <View className="flex-1 justify-center items-center bg-black bg-opacity-50">
                <View className="w-11/12 bg-white rounded-xl p-6 shadow-lg">
                    <Text className="text-2xl font-bold mb-4 text-teal-700 text-center">
                        Attendance Details
                    </Text>
                    
                    <View className="mb-4">
                        <Text className="font-semibold text-gray-600">Name:</Text>
                        <Text className="text-lg">{attendance.name}</Text>
                    </View>

                    <View className="flex-row mb-4">
                        <View className="flex-1 mr-2">
                            <Text className="font-semibold text-gray-600">Check-In</Text>
                            <Text>{attendance.check_in_time 
                                ? new Date(attendance.check_in_time).toLocaleString() 
                                : 'N/A'}</Text>
                            {attendance.latest_attendance?.check_in_image && (
                                <Image
                                    source={{
                                        uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_in_image}`,
                                    }}
                                    className="w-24 h-24 rounded-md mt-2"
                                    resizeMode="cover"
                                />
                            )}
                        </View>
                        <View className="flex-1 ml-2">
                            <Text className="font-semibold text-gray-600">Check-Out</Text>
                            <Text>{attendance.check_out_time 
                                ? new Date(attendance.check_out_time).toLocaleString() 
                                : 'N/A'}</Text>
                            {attendance.latest_attendance?.check_out_image && (
                                <Image
                                    source={{
                                        uri: `https://at.realvictorygroups.xyz/storage/${attendance.latest_attendance.check_out_image}`,
                                    }}
                                    className="w-24 h-24 rounded-md mt-2"
                                    resizeMode="cover"
                                />
                            )}
                        </View>
                    </View>

                    <View className="mb-4">
                        <Text className="font-semibold text-gray-600">Working Hours:</Text>
                        <Text className="text-lg">{attendance.office_time || 'N/A'}</Text>
                    </View>

                    <TouchableOpacity 
                        onPress={onClose}
                        className="bg-teal-500 py-3 rounded-lg mt-4"
                    >
                        <Text className="text-white text-center font-bold">Close</Text>
                    </TouchableOpacity>
                </View>
            </View>
        </Modal>
    );
};

const AttendanceScreen = () => {
    const [attendanceData, setAttendanceData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [selectedAttendance, setSelectedAttendance] = useState(null);

    useEffect(() => {
        const getAttendanceData = async () => {
            try {
                const data = await fetchAttendanceData();
                setAttendanceData(data);
                setLoading(false);
            } catch (error) {
                setError(error.message);
                setLoading(false);
            }
        };

        getAttendanceData();
    }, []);

    const renderAttendanceItem = ({ item }) => (
        <TouchableOpacity 
            onPress={() => setSelectedAttendance(item)}
            className="bg-white rounded-lg p-4 mb-3 shadow-md flex-row items-center"
        >
            <View className="flex-1">
                <Text className="text-lg font-bold text-teal-700">{item.name}</Text>
                <View className="flex-row mt-2">
                    <View className="flex-1">
                        <Text className="text-gray-600">Check-In</Text>
                        <Text className="font-semibold">
                            {item.check_in_time 
                                ? new Date(item.check_in_time).toLocaleTimeString() 
                                : 'N/A'}
                        </Text>
                    </View>
                    <View className="flex-1">
                        <Text className="text-gray-600">Check-Out</Text>
                        <Text className="font-semibold">
                            {item.check_out_time 
                                ? new Date(item.check_out_time).toLocaleTimeString() 
                                : 'N/A'}
                        </Text>
                    </View>
                </View>
            </View>
            <View className="ml-2">
                <Text className="text-sm text-gray-500">
                    {item.office_time || 'No hours'}
                </Text>
            </View>
        </TouchableOpacity>
    );

    if (loading) {
        return (
            <SafeAreaView className="flex-1 justify-center items-center bg-gray-100">
                <ActivityIndicator size="large" color="#0D9488" />
            </SafeAreaView>
        );
    }

    if (error) {
        return (
            <SafeAreaView className="flex-1 justify-center items-center bg-gray-100 p-4">
                <Text className="text-red-500 text-lg text-center">{`Error: ${error}`}</Text>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView className="flex-1 bg-gray-100">
            <View className="p-4 bg-teal-600">
                <Text className="text-2xl font-bold text-white text-center">
                    Attendance Tracker
                </Text>
            </View>

            {attendanceData && attendanceData.length > 0 ? (
                <FlatList
                    data={attendanceData}
                    renderItem={renderAttendanceItem}
                    keyExtractor={(item) => item.id.toString()}
                    contentContainerStyle={{ 
                        paddingHorizontal: 16, 
                        paddingTop: 16 
                    }}
                />
            ) : (
                <View className="flex-1 justify-center items-center">
                    <Text className="text-gray-500 text-lg">
                        No attendance data available.
                    </Text>
                </View>
            )}

            <AttendanceDetailModal 
                attendance={selectedAttendance}
                isVisible={!!selectedAttendance}
                onClose={() => setSelectedAttendance(null)}
            />
        </SafeAreaView>
    );
};

export default AttendanceScreen;